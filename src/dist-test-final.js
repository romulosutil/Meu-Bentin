#!/usr/bin/env node

/**
 * TESTE DEFINITIVO DIST - Meu Bentin Sistema
 * For√ßa teste do output directory correto
 */

import { execSync } from 'child_process';
import { existsSync, rmSync, readdirSync, statSync } from 'fs';
import { join } from 'path';

console.log('üéØ TESTE DEFINITIVO DIST - Meu Bentin Sistema\n');

// Fun√ß√£o para limpar todas as pastas de build
function cleanBuildDirs() {
  const dirsToClean = ['dist', 'build', 'out', '.vercel', '.vite', 'node_modules/.vite'];
  
  console.log('üßπ Limpando todas as pastas de build...');
  dirsToClean.forEach(dir => {
    if (existsSync(dir)) {
      try {
        rmSync(dir, { recursive: true, force: true });
        console.log(`‚úÖ Removido: ${dir}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  Erro ao remover ${dir}: ${error.message}`);
      }
    }
  });
}

// Fun√ß√£o para verificar configura√ß√£o Vite
function checkViteConfig() {
  console.log('\nüîç Verificando configura√ß√£o Vite...');
  
  if (!existsSync('vite.config.ts')) {
    throw new Error('‚ùå vite.config.ts n√£o encontrado!');
  }
  
  const viteConfig = require('fs').readFileSync('vite.config.ts', 'utf8');
  
  // Verificar se outDir est√° correto
  if (viteConfig.includes("outDir: 'dist'")) {
    console.log('‚úÖ outDir configurado corretamente: dist');
  } else {
    throw new Error('‚ùå outDir n√£o est√° configurado como "dist"');
  }
  
  // Verificar se n√£o h√° refer√™ncias a 'build'
  if (viteConfig.includes("outDir: 'build'") || viteConfig.includes('dir: \'build\'')) {
    throw new Error('‚ùå Configura√ß√£o cont√©m refer√™ncia √† pasta "build"');
  }
  
  console.log('‚úÖ Configura√ß√£o Vite est√° correta');
}

// Fun√ß√£o para executar build
function runBuild() {
  console.log('\nüèóÔ∏è  Executando build de teste...');
  
  try {
    // Executar build com output verboso
    const buildOutput = execSync('npx vite build --mode production', { 
      encoding: 'utf8',
      stdio: 'pipe'
    });
    
    console.log('üìã Output do build:');
    console.log(buildOutput);
    
    return buildOutput;
  } catch (error) {
    console.error('‚ùå Erro no build:', error.message);
    if (error.stdout) console.log('STDOUT:', error.stdout);
    if (error.stderr) console.log('STDERR:', error.stderr);
    throw error;
  }
}

// Fun√ß√£o para verificar resultado
function verifyBuildResult() {
  console.log('\nüîç Verificando resultado do build...');
  
  // Verificar se dist existe
  if (!existsSync('dist')) {
    throw new Error('‚ùå Pasta "dist" n√£o foi criada!');
  }
  
  console.log('‚úÖ Pasta "dist" foi criada');
  
  // Verificar se build foi criada (n√£o deveria existir)
  if (existsSync('build')) {
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Pasta "build" foi criada (incorreto)');
    
    // Mostrar conte√∫do da pasta build
    const buildContents = readdirSync('build');
    console.log('üìÅ Conte√∫do da pasta build:', buildContents);
  }
  
  // Verificar conte√∫do da pasta dist
  const distContents = readdirSync('dist');
  console.log('üìÅ Conte√∫do da pasta dist:', distContents);
  
  // Verificar se index.html existe em dist
  if (!existsSync('dist/index.html')) {
    throw new Error('‚ùå index.html n√£o encontrado em dist/');
  }
  
  console.log('‚úÖ index.html encontrado em dist/');
  
  // Verificar se assets existem
  if (!existsSync('dist/assets')) {
    throw new Error('‚ùå Pasta assets n√£o encontrada em dist/');
  }
  
  const assetsContents = readdirSync('dist/assets');
  console.log('üìÅ Assets encontrados:', assetsContents.length, 'arquivos');
  
  // Verificar tamanho total
  const distSize = getDirSize('dist');
  console.log(`üìä Tamanho total da pasta dist: ${(distSize / 1024 / 1024).toFixed(2)}MB`);
  
  return true;
}

// Fun√ß√£o para calcular tamanho do diret√≥rio
function getDirSize(dirPath) {
  let totalSize = 0;
  
  function calculateSize(itemPath) {
    const stats = statSync(itemPath);
    
    if (stats.isDirectory()) {
      const items = readdirSync(itemPath);
      items.forEach(item => {
        calculateSize(join(itemPath, item));
      });
    } else {
      totalSize += stats.size;
    }
  }
  
  calculateSize(dirPath);
  return totalSize;
}

// Executar teste completo
async function runCompleteTest() {
  try {
    console.log('üöÄ INICIANDO TESTE DEFINITIVO DO DIST\n');
    
    // Passo 1: Limpeza
    cleanBuildDirs();
    
    // Passo 2: Verificar configura√ß√£o
    checkViteConfig();
    
    // Passo 3: Build
    const buildOutput = runBuild();
    
    // Passo 4: Verificar resultado
    verifyBuildResult();
    
    // Resultado final
    console.log('\n' + '='.repeat(50));
    console.log('üéâ TESTE DEFINITIVO CONCLU√çDO COM SUCESSO!');
    console.log('='.repeat(50));
    console.log('‚úÖ Pasta "dist" foi criada corretamente');
    console.log('‚úÖ Todos os assets est√£o na pasta dist');
    console.log('‚úÖ Configura√ß√£o est√° funcionando perfeitamente');
    
    // Verificar se h√° men√ß√£o a "build" no output
    if (buildOutput.includes('build/')) {
      console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Output do build menciona pasta "build"');
      console.log('Isso pode indicar um problema na configura√ß√£o.');
    } else {
      console.log('\n‚úÖ Output do build n√£o menciona pasta "build"');
    }
    
    console.log('\nüöÄ SISTEMA PRONTO PARA DEPLOY NA VERCEL!');
    
  } catch (error) {
    console.error('\n‚ùå TESTE FALHOU:', error.message);
    console.log('\nüîß POSS√çVEIS CAUSAS:');
    console.log('   1. Configura√ß√£o Vite incorreta');
    console.log('   2. Cache do Vite corrompido');
    console.log('   3. Depend√™ncias conflitantes');
    console.log('   4. Arquivos de configura√ß√£o duplicados');
    
    console.log('\nüõ†Ô∏è  SOLU√á√ïES SUGERIDAS:');
    console.log('   1. npm run clean && npm install');
    console.log('   2. Remover node_modules e reinstalar');
    console.log('   3. Verificar se n√£o h√° vite.config.js escondido');
    
    process.exit(1);
  }
}

// Executar
runCompleteTest();