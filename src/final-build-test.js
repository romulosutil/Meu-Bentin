#!/usr/bin/env node

/**
 * VERIFICA√á√ÉO COMPLETA - Build Configuration Meu Bentin
 * Testa todas as configura√ß√µes de build e deploy
 */

import { existsSync, readFileSync } from 'fs';

console.log('üî• VERIFICA√á√ÉO COMPLETA - Build Meu Bentin Sistema\n');

let errors = [];
let warnings = [];
let success = [];

// Teste 1: Verificar arquivos essenciais
console.log('1Ô∏è‚É£ Verificando arquivos essenciais...');
const essentialFiles = [
  'vite.config.ts',
  'vercel.json', 
  'package.json',
  'App.tsx',
  'index.html'
];

essentialFiles.forEach(file => {
  if (existsSync(file)) {
    success.push(`‚úÖ ${file} encontrado`);
  } else {
    errors.push(`‚ùå ${file} n√£o encontrado`);
  }
});

// Teste 2: Verificar configs duplicadas/conflitantes
console.log('\n2Ô∏è‚É£ Verificando configs duplicadas...');
const conflictingFiles = [
  'vite.config.prod.ts', 
  'vite.config.unified.ts',
  'vercel-build.sh',
  'vercel-deploy-final.sh',
  'build-env.sh'
];

let foundConflicts = false;
conflictingFiles.forEach(file => {
  if (existsSync(file)) {
    warnings.push(`‚ö†Ô∏è  Arquivo conflitante: ${file}`);
    foundConflicts = true;
  }
});

if (!foundConflicts) {
  success.push('‚úÖ Nenhum arquivo conflitante encontrado');
}

// Teste 3: Verificar configura√ß√£o Vite
console.log('\n3Ô∏è‚É£ Verificando configura√ß√£o Vite...');
if (existsSync('vite.config.ts')) {
  try {
    const viteConfig = readFileSync('vite.config.ts', 'utf8');
    if (viteConfig.includes("outDir: 'dist'")) {
      success.push('‚úÖ Output directory configurado corretamente: dist');
    } else if (viteConfig.includes('path.resolve(__dirname, \'dist\')')) {
      warnings.push('‚ö†Ô∏è  Output usando path.resolve - pode causar problemas');
    } else {
      errors.push('‚ùå Output directory n√£o encontrado na config');
    }
  } catch (err) {
    errors.push('‚ùå Erro ao ler vite.config.ts');
  }
}

// Teste 4: Verificar configura√ß√£o Vercel
console.log('\n4Ô∏è‚É£ Verificando configura√ß√£o Vercel...');
if (existsSync('vercel.json')) {
  try {
    const vercelConfig = JSON.parse(readFileSync('vercel.json', 'utf8'));
    
    if (vercelConfig.outputDirectory === 'dist') {
      success.push('‚úÖ Vercel outputDirectory: dist');
    } else {
      warnings.push(`‚ö†Ô∏è  Vercel outputDirectory: ${vercelConfig.outputDirectory}`);
    }
    
    if (vercelConfig.buildCommand && vercelConfig.buildCommand.includes('vite build')) {
      success.push('‚úÖ Vercel buildCommand cont√©m vite build');
    } else {
      warnings.push('‚ö†Ô∏è  Vercel buildCommand pode estar incorreto');
    }
    
    if (vercelConfig.framework === 'vite') {
      success.push('‚úÖ Framework Vercel: vite');
    } else {
      warnings.push(`‚ö†Ô∏è  Framework Vercel: ${vercelConfig.framework || 'n√£o definido'}`);
    }
    
  } catch (err) {
    errors.push('‚ùå Erro ao ler vercel.json - JSON inv√°lido');
  }
}

// Teste 5: Verificar scripts package.json
console.log('\n5Ô∏è‚É£ Verificando scripts package.json...');
if (existsSync('package.json')) {
  try {
    const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
    
    if (packageJson.scripts?.build) {
      success.push(`‚úÖ Script build: ${packageJson.scripts.build}`);
    } else {
      errors.push('‚ùå Script build n√£o encontrado');
    }
    
    if (packageJson.scripts?.['vercel-build']) {
      success.push('‚úÖ Script vercel-build configurado');
    } else {
      warnings.push('‚ö†Ô∏è  Script vercel-build n√£o encontrado');
    }
    
    if (packageJson.scripts?.['build:verify']) {
      success.push('‚úÖ Script build:verify configurado');
    }
    
  } catch (err) {
    errors.push('‚ùå Erro ao ler package.json');
  }
}

// Teste 6: Verificar pastas que podem causar conflito
console.log('\n6Ô∏è‚É£ Verificando pastas de conflito...');
['dist', 'build', 'out'].forEach(dir => {
  if (existsSync(dir)) {
    warnings.push(`‚ö†Ô∏è  Pasta ${dir} existe (ser√° limpa no build)`);
  }
});

// Resultado final
console.log('\n' + '='.repeat(50));
console.log('üìä RESULTADO DA VERIFICA√á√ÉO');
console.log('='.repeat(50));

if (success.length > 0) {
  console.log('\n‚úÖ SUCESSOS:');
  success.forEach(msg => console.log(`   ${msg}`));
}

if (warnings.length > 0) {
  console.log('\n‚ö†Ô∏è  AVISOS:');
  warnings.forEach(msg => console.log(`   ${msg}`));
}

if (errors.length > 0) {
  console.log('\n‚ùå ERROS:');
  errors.forEach(msg => console.log(`   ${msg}`));
}

// Status final
console.log('\n' + '='.repeat(50));
if (errors.length === 0) {
  console.log('üéâ SISTEMA PRONTO PARA DEPLOY!');
  console.log('üöÄ Configura√ß√£o validada com sucesso');
  
  if (warnings.length > 0) {
    console.log('\n‚ÑπÔ∏è  Execute "node final-cleanup.js" para resolver avisos');
  }
  
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('   1. npm run build (teste local)');
  console.log('   2. git add . && git commit -m "Fix: Otimiza√ß√£o final"');
  console.log('   3. git push (deploy autom√°tico Vercel)');
  
  process.exit(0);
} else {
  console.log('‚ùå CORRIJA OS ERROS ANTES DO DEPLOY');
  console.log('\n‚ÑπÔ∏è  Execute "node final-cleanup.js" para limpar conflitos');
  process.exit(1);
}