#!/usr/bin/env node

/**
 * VERIFICA√á√ÉO E CORRE√á√ÉO VERCEL CONFIG - Meu Bentin
 * Garante que a configura√ß√£o da Vercel est√° 100% correta
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';

console.log('üîß VERIFICA√á√ÉO VERCEL CONFIG - Meu Bentin\n');

try {
  // Verificar vercel.json
  if (!existsSync('vercel.json')) {
    throw new Error('‚ùå vercel.json n√£o encontrado!');
  }

  let vercelConfig = JSON.parse(readFileSync('vercel.json', 'utf8'));
  let needsUpdate = false;

  console.log('üìã Configura√ß√£o atual:');
  console.log(`   Framework: ${vercelConfig.framework}`);
  console.log(`   Build Command: ${vercelConfig.buildCommand}`);
  console.log(`   Output Directory: ${vercelConfig.outputDirectory}`);

  // Verificar e corrigir framework
  if (vercelConfig.framework !== 'vite') {
    console.log('‚ö†Ô∏è  Corrigindo framework para "vite"...');
    vercelConfig.framework = 'vite';
    needsUpdate = true;
  }

  // Verificar e corrigir buildCommand
  if (vercelConfig.buildCommand !== 'vite build') {
    console.log('‚ö†Ô∏è  Corrigindo buildCommand para "vite build"...');
    vercelConfig.buildCommand = 'vite build';
    needsUpdate = true;
  }

  // Verificar e corrigir outputDirectory
  if (vercelConfig.outputDirectory !== 'dist') {
    console.log('‚ö†Ô∏è  Corrigindo outputDirectory para "dist"...');
    vercelConfig.outputDirectory = 'dist';
    needsUpdate = true;
  }

  // Adicionar configura√ß√µes essenciais se n√£o existirem
  if (!vercelConfig.cleanUrls) {
    vercelConfig.cleanUrls = true;
    needsUpdate = true;
  }

  if (!vercelConfig.trailingSlash) {
    vercelConfig.trailingSlash = false;
    needsUpdate = true;
  }

  // Verificar rewrites (essencial para SPA)
  if (!vercelConfig.rewrites || !Array.isArray(vercelConfig.rewrites) || vercelConfig.rewrites.length === 0) {
    console.log('‚ö†Ô∏è  Adicionando rewrites para SPA...');
    vercelConfig.rewrites = [
      {
        "source": "/((?!api).*)",
        "destination": "/index.html"
      }
    ];
    needsUpdate = true;
  }

  // Atualizar arquivo se necess√°rio
  if (needsUpdate) {
    writeFileSync('vercel.json', JSON.stringify(vercelConfig, null, 2));
    console.log('‚úÖ vercel.json atualizado com sucesso!');
  } else {
    console.log('‚úÖ vercel.json j√° est√° correto!');
  }

  // Verificar vite.config.ts
  console.log('\nüîç Verificando vite.config.ts...');
  
  if (!existsSync('vite.config.ts')) {
    throw new Error('‚ùå vite.config.ts n√£o encontrado!');
  }

  const viteConfig = readFileSync('vite.config.ts', 'utf8');
  
  if (!viteConfig.includes("outDir: 'dist'")) {
    throw new Error('‚ùå vite.config.ts n√£o tem outDir configurado como "dist"');
  }

  console.log('‚úÖ vite.config.ts est√° correto!');

  // Verificar package.json
  console.log('\nüîç Verificando package.json...');
  
  const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
  
  if (!packageJson.scripts.build) {
    throw new Error('‚ùå Script build n√£o encontrado no package.json');
  }

  if (!packageJson.scripts['vercel-build']) {
    throw new Error('‚ùå Script vercel-build n√£o encontrado no package.json');
  }

  console.log('‚úÖ package.json est√° correto!');

  // Resultado final
  console.log('\n' + '='.repeat(50));
  console.log('üéâ CONFIGURA√á√ÉO VERCEL VERIFICADA E CORRIGIDA!');
  console.log('='.repeat(50));
  console.log('‚úÖ Framework: vite');
  console.log('‚úÖ Build Command: vite build');
  console.log('‚úÖ Output Directory: dist');
  console.log('‚úÖ SPA Rewrites: configurado');
  console.log('‚úÖ Clean URLs: habilitado');
  
  console.log('\nüöÄ DEPLOY NA VERCEL PRONTO PARA SER EXECUTADO!');
  
  console.log('\nüìã Comandos de teste recomendados:');
  console.log('   1. npm run test:dist     # Testa build local');
  console.log('   2. git add .');
  console.log('   3. git commit -m "fix: Config Vercel corrigida"');
  console.log('   4. git push             # Deploy autom√°tico');

} catch (error) {
  console.error('\n‚ùå ERRO:', error.message);
  process.exit(1);
}